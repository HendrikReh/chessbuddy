name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

env:
  UNDICI_NO_GLOBAL: "true"

jobs:
  build:
    name: Build & Test (${{ matrix.os }} / OCaml ${{ matrix.ocaml }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        ocaml: [5.1.x, 5.2.x]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Cache opam switch
        uses: actions/cache@v4
        with:
          path: ~/.opam
          key: opam-${{ runner.os }}-${{ matrix.ocaml }}-${{ hashFiles('**/*.opam', 'dune-project') }}
          restore-keys: |
            opam-${{ runner.os }}-${{ matrix.ocaml }}-

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Set up OCaml
        uses: ocaml/setup-ocaml@v3
        with:
          ocaml-compiler: ${{ matrix.ocaml }}
          dune-cache: true

      - name: Install libpq (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install libpq
          if [ -d /opt/homebrew/opt/libpq ]; then
            LIBPQ_PREFIX=/opt/homebrew/opt/libpq
          else
            LIBPQ_PREFIX=/usr/local/opt/libpq
          fi
          echo "$LIBPQ_PREFIX/bin" >> "$GITHUB_PATH"
          echo "PKG_CONFIG_PATH=$LIBPQ_PREFIX/lib/pkgconfig:$PKG_CONFIG_PATH" >> "$GITHUB_ENV"

      - name: Install dependencies
        run: opam install . --deps-only --with-test --yes

      - name: Build
        run: opam exec -- dune build

      - name: Run tests
        run: opam exec -- dune runtest

  lint:
    name: Lint (warnings as errors)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Cache opam switch
        uses: actions/cache@v4
        with:
          path: ~/.opam
          key: opam-${{ runner.os }}-lint-${{ hashFiles('**/*.opam', 'dune-project') }}
          restore-keys: |
            opam-${{ runner.os }}-lint-

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Set up OCaml
        uses: ocaml/setup-ocaml@v3
        with:
          ocaml-compiler: 5.2.x
          dune-cache: true

      - name: Install dependencies
        run: opam install . --deps-only --with-test --yes

      - name: Build with warnings as errors
        env:
          OCAMLPARAM: _,warn-error=+a
        run: |
          set -eo pipefail
          opam exec -- dune build --display=short

  fmt:
    name: Format Check
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache opam switch
        uses: actions/cache@v4
        with:
          path: ~/.opam
          key: opam-${{ runner.os }}-fmt-${{ hashFiles('**/*.opam', 'dune-project') }}
          restore-keys: |
            opam-${{ runner.os }}-fmt-

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Set up OCaml
        uses: ocaml/setup-ocaml@v3
        with:
          ocaml-compiler: 5.2.x
          dune-cache: true

      - name: Install ocamlformat
        run: opam install ocamlformat.0.27.0 --yes

      - name: Check formatting
        run: |
          opam exec -- dune fmt --display=quiet
          git diff --exit-code
